# Pre-build Checks (moonshot-ui)
# 1. Unit tests with code coverage (jest)
# 2. Code quality analysis (lint)
# 3. Dependency analysis (vulnerabilities)
# 4. Dependency analysis (undesirable licenses)
# 5. Deploy reports generated from the above to GitHub Pages

name: Pre-Build Checks

on:
  # Runs when a pull request to main is being assigned
  pull_request:
    types: [ assigned, synchronize ]
    branches:
      - 'dev_main'

  # Run this workflow manually from Actions tab
  workflow_dispatch:
    inputs:
      branch_to_test:
        description: 'Branch or tag to run test'
        required: true
        default: 'dev_main'
        type: string

# Allow one concurrent deployment
concurrency:
  group: ${{ github.repository }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:

  pre-build-checks:
    # Run only when PR is assigned, even on subsequent commits (i.e. synchronize)
    if: (github.event_name == 'pull_request' && github.event.pull_request.assignee != null) || github.event_name == 'workflow_dispatch'

    runs-on: ubuntu-latest
    timeout-minutes: 40

    steps:

      - name: Set Branch Variable (pull_request)
        if: github.event_name == 'pull_request'
        run: |
          echo "BRANCH=${{ github.event.pull_request.head.ref }}" >> "$GITHUB_ENV"

      - name: Set Branch Variable (workflow_dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "BRANCH=${{ inputs.branch_to_test }}" >> "$GITHUB_ENV"

      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          ref: ${{ env.BRANCH }}
          submodules: recursive

      # Install dependencies
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Install Dependencies
        run: |
          npm install --omit=dev
          npx license-checker --summary --out licenses-found.txt -y
          npm install -D
          npm i -D badge-maker
          npm i -D eslint-formatter-html
          cp .env.local .env
          npm run build

#      # Format check
#      - name: Format Check
#        if: ${{ ! cancelled() }}
#        run: |
#          npm run format-check

      # Unit Tests & Coverage
      - name: Unit tests with coverage
        if: ${{ ! cancelled() }}
        timeout-minutes: 30
        run: |
          set +e
          sudo timedatectl set-timezone Asia/Singapore
          npm run coverage
          exit_code_jest=$?
          node .ci/createBadges.mjs test
          node .ci/createBadges.mjs coverage
          set -e
          if [ $exit_code_jest -ne 0 ]; then
            echo "jest failed, exiting..."
            exit $exit_code_jest
          fi

      # lint
      - name: Code quality analysis - lint
        if: ${{ ! cancelled() }}
        run: |
          set +e
          npm run lint-check
          exit_code_lint=$?
          npm run lint-html-report
          npm run lint-json-report
          node .ci/createBadges.mjs lint
          set -e
          if [ $exit_code_lint -ne 0 ]; then
            echo "lint failed, exiting..."
            exit $exit_code_lint
          fi

      # npm audit
      - name: Dependency analysis - vulnerabilities & licenses
        if: ${{ ! cancelled() }}
        run: |
          set +e
          npm audit --omit=dev
          exit_code_audit=$?         
          npm audit --omit=dev --json | npx npm-audit-markdown --output npm-audit-report.md
          npx markdown-to-html-cli --source npm-audit-report.md --output npm-audit-report.html -y
          echo -e "License Check Summary for moonshot-ui\n" > license-report.txt
          cat licenses-found.txt >> license-report.txt
          cat license-report.txt
          cp license-report.txt licenses-found.txt
          node .ci/createBadges.mjs dependency        
          node .ci/createBadges.mjs license
          set -e
          if [ $exit_code_audit -ne 0 ]; then
            echo "npm audit failed, exiting..."
            exit $exit_code_audit
          fi

#      ### Publish reports to ci dashboard ###
#
#      - name: Checkout dashboard
#        if: ${{ github.event.pull_request.head.repo.full_name == github.repository && always() }}
#        uses: actions/checkout@v3
#        with:
#          repository: aiverify-foundation/ci-dashboard
#          token: ${{ secrets.CHECKOUT_TOKEN }}
#          ref: main
#          path: check-results
#
#      - name: Push results to dashboard
#        if: ${{ github.event.pull_request.head.repo.full_name == github.repository && always() }}
#        working-directory: ${{ github.workspace }}/check-results
#        run: |
#          set +e
#          find ../ -type f -name ".gitignore" -exec rm {} +
#          [ -d "docs/pre-build/moonshot-ui" ] && rm -rf docs/pre-build/moonshot-ui
#          mkdir -p docs/pre-build/moonshot-ui
#          mv ../coverage docs/pre-build/moonshot-ui/
#          mv ../*.svg docs/pre-build/moonshot-ui/
#          mv ../*.html docs/pre-build/moonshot-ui/
#          mv ../*.md docs/pre-build/moonshot-ui/
#          mv ../*.txt docs/pre-build/moonshot-ui/
#          git add docs/pre-build/moonshot-ui
#          git config user.name "moonshot"
#          git config user.email "moonshot@imda.gov.sg"
#          git commit -m "feat(moonshot-ui) actions publish moonshot-ui reports to dashboard"
#          git push
#          set -e
